#include <iostream>
#include <vector>
#include <cmath>
#include <list>
#include <stdexcept>
#include <algorithm>

class ComplexInt {
public:
    int real;
    int imag;

    ComplexInt(int r = 0, int i = 0) : real(r), imag(i) {}

    double modulus() const {
        return std::sqrt(real * real + imag * imag);
    }

    bool operator<(const ComplexInt& other) const {
        if (modulus() == other.modulus()) {
            return real < other.real;
        }
        return modulus() < other.modulus();
    }

    bool operator>(const ComplexInt& other) const {
        if (modulus() == other.modulus()) {
            return real > other.real;
        }
        return modulus() > other.modulus();
    }

    friend std::ostream& operator<<(std::ostream& os, const ComplexInt& c) {
        os << "(" << c.real << ", " << c.imag << ")";
        return os;
    }
};

class BinomialPyramid {
private:
    struct Node {
        ComplexInt key;
        std::list<Node*> children;

        Node(const ComplexInt& value) : key(value) {}
    };

    std::list<Node*> roots;

    void link(Node* y, Node* z) {
        y->children.push_back(z);
    }

    std::list<Node*> merge(const std::list<Node*>& h1, const std::list<Node*>& h2) {
        std::list<Node*> merged;
        auto it1 = h1.begin();
        auto it2 = h2.begin();

        while (it1 != h1.end() && it2 != h2.end()) {
            merged.push_back((*it1)->key > (*it2)->key ? *it1++ : *it2++);
        }

        merged.insert(merged.end(), it1, h1.end());
        merged.insert(merged.end(), it2, h2.end());

        return merged;
    }

    std::list<Node*> unionPyramids(const std::list<Node*>& h1, const std::list<Node*>& h2) {
        std::list<Node*> merged = merge(h1, h2);

        if (merged.empty()) return merged;

        auto prev = merged.begin();
        auto curr = std::next(prev);
        auto next = std::next(curr);

        while (curr != merged.end()) {
            if ((next != merged.end() && (*curr)->children.size() != (*next)->children.size()) ||
                (next == merged.end() && (*curr)->children.size() != (*prev)->children.size())) {
                prev = curr;
                curr = next;
            } else if ((*prev)->children.size() == (*curr)->children.size()) {
                if (next != merged.end() && (*next)->children.size() == (*curr)->children.size()) {
                    prev = curr;
                    curr = next;
                } else if ((*curr)->key > (*prev)->key) {
                    (*prev)->children.push_back(*curr);
                    curr = next;
                } else {
                    (*curr)->children.push_back(*prev);
                    prev = curr;
                }
            }
            if (next != merged.end()) {
                ++next;
            }
        }

        return merged;
    }

    Node* extractMaxNode() {
        if (roots.empty()) {
            throw std::out_of_range("Pyramid is empty");
        }

        auto maxNode = roots.begin();
        for (auto it = roots.begin(); it != roots.end(); ++it) {
            if ((*it)->key > (*maxNode)->key) {
                maxNode = it;
            }
        }

        Node* max = *maxNode;
        roots.erase(maxNode);

        std::list<Node*> childList;
        for (auto child : max->children) {
            childList.push_front(child);
        }

        roots = unionPyramids(roots, childList);
        return max;
    }

public:
    BinomialPyramid() = default;

    void insert(const ComplexInt& value) {
        Node* newNode = new Node(value);
        roots = unionPyramids(roots, {newNode});
    }

    ComplexInt extractMax() {
        Node* maxNode = extractMaxNode();
        ComplexInt maxValue = maxNode->key;
        delete maxNode;
        return maxValue;
    }

    ComplexInt getMax() const {
        if (roots.empty()) {
            throw std::out_of_range("Pyramid is empty");
        }

        auto maxNode = roots.begin();
        for (auto it = roots.begin(); it != roots.end(); ++it) {
            if ((*it)->key > (*maxNode)->key) {
                maxNode = it;
            }
        }
        return (*maxNode)->key;
    }

    bool isEmpty() const {
        return roots.empty();
    }
};

int main() {
    BinomialPyramid pyramid;

    pyramid.insert(ComplexInt(3, 4));  // modulus = 5
    pyramid.insert(ComplexInt(1, 7));  // modulus = sqrt(50)
    pyramid.insert(ComplexInt(6, 8));  // modulus = 10
    pyramid.insert(ComplexInt(2, 1));  // modulus = sqrt(5)
    pyramid.insert(ComplexInt(5, 12)); // modulus = 13

    while (!pyramid.isEmpty()) {
        std::cout << pyramid.extractMax() << std::endl;
    }

    return 0;
}
